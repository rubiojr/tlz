#!/usr/bin/env risor

import cli
import strings
import json

// _import_files an import request to the TLZ API
// Parameters:
// - base_url: Base URL of the TLZ server
// - repo_id: Repository ID to import data into
// - data_source: Name of the data source
// - filenames: List of files to import
// - processing_options: Options controlling how data is processed during import
func _import_files(base_url, repo_id, data_source, filenames, processing_options) {
  url := '{base_url}/api/import'

  // Set up headers
  headers := {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:138.0) Gecko/20100101 Firefox/138.0",
    "Accept": "*/*",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Referer": '{base_url}/import',
    "Content-Type": "application/json",
    "Origin": base_url,
    "DNT": "1",
    "Sec-GPC": "1",
    "Connection": "keep-alive",
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-origin",
    "Priority": "u=0"
  }

  // JSON payload
  data := {
    "repo": repo_id,
    "job": {
      "plan": {
        "files": [
          {
            "data_source_name": data_source,
            "filenames": filenames
          }
        ]
      },
      "processing_options": processing_options
    }
  }

  // Make the POST request
  response := fetch(url, {
    "method": "POST",
    "headers": headers,
    "data": data
  })

  // Print the response
  //if response.status_code >= 200 && response.status_code < 300 {
  //  print('Success! Status code:', response.status_code)
  //  print('Response:', response.text())
  //} else {
  //  print('Request failed with status code:', response.status_code)
  //  print('Response:', response.text())
  //}
}

func _request(method, url, headers=0, data=0) {
  opts := {method: method}
  if headers != 0 {
    opts["headers"] = headers
  }
  if data != 0 {
    opts["data"] = data
  }
  return fetch(url, opts)
}

func new_client(base_url, repo_id) {
  client := {
    base_url: base_url,
    repo_id: repo_id,
  }

  # Returns an http.response
  client.import_files = func(data_sources, filenames, opts) {
    _import_files(base_url, repo_id, data_sources, filenames, opts)
  }

  # Returns an http.response
  client.open_repositories = func() {
    _request("GET", '{base_url}/api/open-repositories')
  }

  # Returns an http.response
  client.file_selector_roots = func() {
    _request("GET", '{base_url}/api/file-selector-roots')
  }

  # Returns an http.response
  client.open_repository = func(path, create) {
    _request("GET", '{base_url}/api/open-repository', 0, {repo_path: path, create: create})
  }

  # Returns an http.response
  client.search_items = func(repo, opts) {
    opts.repo = repo
    _request("GET", '{base_url}/api/search-items', 0, opts)
  }

  return client
}
