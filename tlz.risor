import cli
import strings
import json

func _import_files(base_url, repo_id, data_source, filenames, processing_options) {
  url := '{base_url}/api/import'

  // Set up headers
  headers := {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:138.0) Gecko/20100101 Firefox/138.0",
    "Accept": "*/*",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Referer": '{base_url}/import',
    "Content-Type": "application/json",
    "Origin": base_url,
    "DNT": "1",
    "Sec-GPC": "1",
    "Connection": "keep-alive",
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-origin",
    "Priority": "u=0"
  }

  // JSON payload
  data := {
    "repo": repo_id,
    "job": {
      "plan": {
        "files": [
          {
            "data_source_name": data_source,
            "filenames": filenames
          }
        ]
      },
      "processing_options": processing_options
    }
  }

  // Make the POST request
  response := fetch(url, {
    "method": "POST",
    "headers": headers,
    "data": data
  })
}

func _request(method, url, headers=0, data=0) {
  opts := {method: method}
  if headers != 0 {
    opts["headers"] = headers
  }
  if data != 0 {
    opts["data"] = data
  }
  return fetch(url, opts)
}

// new_client creates a client for interacting with the Timelinize API.
// Parameters:
// - base_url: The base URL of the Timelinize server (e.g., "http://localhost:12002")
// - repo_id: Repository ID to perform operations on (must exist)
// Returns: A client object with methods to interact with the Timelinize API
// @global.function
func new_client(base_url, repo_id) {
  // @object.class
  client := {
    base_url: base_url,
    repo_id: repo_id,
  }

  // import_files imports files into a specified data source in the repository.
  // Parameters:
  // - data_source: Name of the data source
  // - filenames: List of files to import
  // - processing_options: Options controlling how data is processed during import
  // Returns: An HTTP response object
  // @object.method
  client.import_files = func(data_sources, filenames, opts) {
    _import_files(base_url, repo_id, data_sources, filenames, opts)
  }

  // open_repositories lists all open repositories
  // Parameters: None
  // Returns: An HTTP response object. Call .json() to parse the response
  // @object.method
  client.open_repositories = func() {
    _request("GET", '{base_url}/api/open-repositories')
  }

  // file_selector_roots retrieves file selector roots from the API
  // Parameters: None
  // Returns: An HTTP response object. Call .json() to parse the response
  // @object.method
  client.file_selector_roots = func() {
    _request("GET", '{base_url}/api/file-selector-roots')
  }

  // open_repository opens an existing repository or creates a new one
  // Parameters:
  // - path: The filesystem path where the repository lives
  // - create: Boolean indicating whether to create the repository if it doesn't exist
  // Returns: An HTTP response object. Call .json() to parse the response
  // @object.method
  client.open_repository = func(path, create) {
    _request("GET", '{base_url}/api/open-repository', 0, {repo_path: path, create: create})
  }

  // search_items searches for items in the repository
  // Parameters:
  // - repo: Repository ID
  // - opts: Search parameters object, which can include:
  //   - datasource: Data source to search within
  //   - data_text: Array of strings for exact text matching
  //   - semantic_text: String for semantic search
  // Returns: An HTTP response object. Call .json() to parse the response
  // @object.method
  client.search_items = func(repo, opts) {
    opts.repo = repo
    _request("GET", '{base_url}/api/search-items', 0, opts)
  }

  // search_entities search for entities in the repository.
  // Parameters:
  // - repo: Repository repo_id
  // - opts: Search options, which can include:
  //   - attributes: an attributes map (See [Timelinize source](https://github.com/timelinize/timelinize/blob/457e3f48cc974c49e2c674b7f2c7788268f743d5/timeline/entities.go#L196))
  // Returns: An HTTP response oebject. Call .json() to parse the response
  // @object.method
  client.search_entities = func(repo, opts) {
    _request("GET", '{base_url}/api/search-entities', 0, opts)
  }

  // datasources retrieves available data sources
  // Parameters: None
  // Returns: An HTTP response object. Call .json() to parse the response
  // @object.method
  client.datasources = func() {
    _request("GET", '{base_url}/api/data-sources', 0, {repo: repo_id})
  }

  // charts returns statistics about the timeline for use in charts
  // Parameters:
  // - name: The chart name
  //
  // Available chart names:
  // - datasources
  // - periodical
  // - classifications
  // - recent_data_sources
  // @object.method
  client.charts = func(name) {
    _request("GET", '{base_url}/api/charts?name={name}&repo_id={repo_id}')
  }

  return client
}
